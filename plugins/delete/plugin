#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Helper plugin to delete resources

source "$SOWLIB/pluginutils"
source "$SOWLIB/k8s"

set -eo pipefail

# handle necessary delete preparation
# args: type name [namespace]
prepare_delete() {
    case "$1" in
        seed)
            # abort if any shoot is still using the given seed
            verbose "Check if shoots are still running on seed '$1' ..."
            if [[ $(kubectl get shoots --all-namespaces -o json | jq -r 'reduce (.items[].spec.seedName | . == "'$2'") as $b (false; . or $b)') == "true" ]]; then
                fail "there are still shoots running on seed '$2'"
            fi
            ;;
        shoot)
            ;&
        project)
            # annotate shoot/project
            exec_cmd kubectl ${3:+"-n"} ${3:-} annotate "$1" "$2" confirmation.gardener.cloud/deletion=true --overwrite
            ;;
    esac
}

# evaluates customFields field, if existing
# - either 'name' or 'customFields' has to be specified
# - 'name' is the name of the resource that should be deleted
# - if the name is not known, 'customFields' can be used instead
# - customFields contains a list of {key: ..., value: ...} objects, mapping a json path to an expected value
# - all resources of the specified type will be filtered using these mappings
# - it is expected that exactly one resource matches
#   - if more than one resource matches, the delete will fail (deleting multiple resources at once is currently not possible)
#   - if no resource matches, an info will be printed and the delete will exit (without error)
evaluate_custom_fields() {
    if [[ -n ${name:-""} ]]; then
        debug "ignoring custom fields, as name is already set"
        return
    fi
    if [[ ${#customFields[@]} -eq 0 ]]; then
        fail "neither 'name' nor 'customFields' is set"
    fi
    # name is not set but customFields is set

    local cmd="kubectl ${namespace:+"-n"} ${namespace:-} get $type -o json"
    local items
    local jsonexp='.items[]'
    if [ -n "$VERBOSE" ]; then
        echo "$cmd"
    fi
    items=$(eval $(echo "$cmd"))
    for filter in ${customFields[@]}; do
        jsonexp=${jsonexp}' | select('$(jq -r '.key' <<< $filter)' == "'$(jq -r '.value' <<< $filter)'")'
    done
    debug "filter expression: '$jsonexp'"
    filtered_items=$(jq -r '[ '"${jsonexp}"' | .metadata.name ]' <<< $items)
    len=$(jq -r 'length' <<< $filtered_items)
    if [[ $len -lt 1 ]]; then
        info "No resource found for filter expression 'jq -r [ ${jsonexp} ]'"
        return
    fi
    if [[ $len -gt 1 ]]; then
        fail "More than one resource found for filter expression 'jq -r [ ${jsonexp} ]'"
    fi
    name=$(jq -r '.[0]' <<< $filtered_items)
}

K8S_setKubeConfig "$PLUGININSTANCE" "$dir/kubeconfig"
getRequiredValue type "type" PLUGINCONFIGJSON
getValue name "name" PLUGINCONFIGJSON
getJSONList customFields "customFields" PLUGINCONFIGJSON
getRequiredValue step "step" PLUGINCONFIGJSON
getValue namespace "namespace" PLUGINCONFIGJSON

case "$1" in
    deploy) ;&
    delete)
        if [[ "$step" == "$1" ]]; then
            evaluate_custom_fields
            if [[ -z ${name:-""} ]]; then
                # should only be the case if customFields was used and didn't match any resources
                # thus the resource that should be deleted is expected to be already gone
                debug "no resource name given, aborting delete"
                exit
            fi
            prepare_delete $type $name $namespace
            exec_cmd kubectl ${namespace:+"-n"} ${namespace:-} delete $type $name --ignore-not-found
        else
            verbose "Nothing to do on $1."
        fi
        ;;
    *) fail "unsupported action $1"
esac