# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
landscape: (( &temporary ))
imports: (( &temporary ))
utilities: (( &temporary ))

temp:
  <<: (( &temporary ))
  type: (( landscape.etcd.backup.type ))
  addon: (( read(dir "/provider.yaml") ))
  dir: (( __ctx.DIR "/provider/" type ))
  credentials: (( landscape.etcd.backup.credentials ))

plugins:
  - helm:
    - etcd.main
  - helm:
    - etcd.events

spec:
  <<: (( &local ))
  providertypes:
    gcs: GCS
    s3: S3
    abs: ABS
    swift: Swift
  ca:
    commonName: garden:ca:etcd
    privateKey: (( state.ca.key ))
    isCA: true
    usage:
      - Signature
      - KeyEncipherment
  server:
    commonName: garden:etcd-server:etcd
    publicKey: (( state.server.pub ))
    caCert: (( state.ca.cert ))
    caPrivateKey: (( state.ca.key ))
    validity: 87600
    usage:
      - ServerAuth
      - ClientAuth
      - KeyEncipherment
    hosts:
      - garden-etcd-main-0
      - <<: (( utilities.svcHosts("garden-etcd-main", landscape.namespace) ))
      - garden-etcd-events-0
      - <<: (( utilities.svcHosts("garden-etcd-events", landscape.namespace) ))
      - localhost
  client:
    commonName: garden:etcd-client:etcd
    publicKey: (( state.client.pub ))
    caCert: (( state.ca.cert ))
    caPrivateKey: (( state.ca.key ))
    validity: 87600
    usage:
      - ServerAuth
      - ClientAuth
      - KeyEncipherment

state:
  ca:
    key: (( x509genkey() ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.ca) ))
  server:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.server) ))
  client:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.client) ))

etcd:
  main:
    kubeconfig: (( landscape.clusters.[0].kubeconfig ))
    source: chart
    name: garden-etcd-main
    namespace: (( .landscape.namespace ))
    values:
      name: (( main.name ))
      replicas: 1

      images:
        etcd: quay.io/coreos/etcd:v3.3.10
        etcd-backup-restore: eu.gcr.io/gardener-project/gardener/etcdbrctl:0.4.1

      backup:
        schedule: "0 */24 * * *" # cron standard schedule
        maxBackups: 7 # Maximum number of backups to keep (may change in future)
        storageProvider: (( spec.providertypes.[landscape.etcd.backup.type] ))  # Abs,Gcs,S3,Swift empty means no backup,
        secretData: (( sum[temp.credentials|{}|c,k,v|->c {k=base64(v)}] ))
        storageContainer: (( imports.backupinfra.export.bucketname ))
        env: (( temp.addon.env ))
        volumeMounts: (( temp.addon.volumeMounts ))

      tls:
        ca:
          crt: (( state.ca.cert ))
          key: (( state.ca.key ))
        server:
          crt: (( state.server.cert ))
          key: (( state.server.key ))
        client:
          crt: (( state.client.cert ))
          key: (( state.client.key ))

  events:
    kubeconfig: (( landscape.clusters.[0].kubeconfig ))
    source: chart
    name: garden-etcd-events
    namespace: (( .landscape.namespace ))
    values:
      name: (( events.name ))
      replicas: 1

      images:
        etcd: quay.io/coreos/etcd:v3.3.10
        etcd-backup-restore: eu.gcr.io/gardener-project/gardener/etcdbrctl:0.4.1

      tls:
        ca:
          crt: (( state.ca.cert ))
          key: (( state.ca.key ))
        server:
          crt: (( state.server.cert ))
          key: (( state.server.key ))
        client:
          crt: (( state.client.cert ))
          key: (( state.client.key ))

exports:
  cacert: (( state.ca.cert ))
  cert: (( state.client.cert ))
  key: (( state.client.key ))
  endpoints:
    main:
    - (( "https://" etcd.main.values.name "." .landscape.namespace ".svc:2379" ))
    events:
    - (( "https://" etcd.events.values.name "." .landscape.namespace ".svc:2379" ))
