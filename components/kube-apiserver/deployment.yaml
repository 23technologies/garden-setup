# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
landscape: (( &temporary ))
imports: (( &temporary ))
utilities: (( &temporary ))

plugins:
  - helm: kubeapiserver

spec:
  <<: (( &temporary ))
  apiserver_dns: (( "api." imports.ingress_controller.export.ingress_domain ))
  gardener_dns: (( "gardener." imports.ingress_controller.export.ingress_domain ))
  ca:
    commonName: garden:ca:kube-apiserver
    privateKey: (( .state.kube_apiserver_ca.key ))
    isCA: true
    usage:
      - Signature
      - KeyEncipherment
  server:
    commonName: "garden:server:kube-apiserver"
    publicKey: (( .state.kube_apiserver_server.pub ))
    caCert: (( .state.kube_apiserver_ca.cert ))
    caPrivateKey: (( .state.kube_apiserver_ca.key ))
    validity: 87600
    usage:
      - ServerAuth
      - Signature
      - KeyEncipherment
    hosts:
      - "127.0.0.1"
      - "localhost"
      - "100.64.0.1"
      - <<: (( utilities.svcHosts("garden-kube-apiserver", landscape.namespace)  ))
      - <<: (( utilities.svcHosts("kubernetes", "default")  ))
      - (( .spec.apiserver_dns ))
      - (( .spec.gardener_dns ))
  client:
    common:
      caCert: (( .state.kube_apiserver_ca.cert ))
      caPrivateKey: (( .state.kube_apiserver_ca.key ))
      validity: 87600
      usage:
        - Signature
        - ClientAuth
        - KeyEncipherment
    kube_controller_manager:
      commonName: "system:kube-controller-manager"
      publicKey: (( .state.kube_apiserver_client_kube_controller_manager.pub ))
      <<: (( common ))
    admin:
      commonName: "garden:client:admin"
      publicKey: (( state.kube_apiserver_client_admin.pub ))
      organization: "system:masters"
      <<: (( common ))
  aggregator_ca:
    commonName: "garden:ca:kube-aggregator"
    privateKey: (( .state.kube_aggregator_ca.key ))
    hosts:
      - "garden:ca:kube-aggregator"
    isCA: true
    usage:
      - Signature
      - KeyEncipherment
  aggregator_client:
    commonName: "garden:aggregator-client:kube-aggregator"
    publicKey: (( .state.kube_aggregator_client.pub ))
    caCert: (( .state.kube_aggregator_ca.cert ))
    caPrivateKey: (( .state.kube_aggregator_ca.key ))
    validity: 87600
    usage:
      - Signature
      - ClientAuth
      - KeyEncipherment


state:
  kube_apiserver_ca:
    key: (( x509genkey() ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(.spec.ca) ))
  kube_apiserver_server:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(.spec.server) ))
  kube_apiserver_client_kube_controller_manager:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.client.kube_controller_manager) ))
  kube_apiserver_client_admin:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.client.admin) ))
  kube_aggregator_ca:
    key: (( x509genkey() ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(.spec.aggregator_ca) ))
  kube_aggregator_client:
    key: (( x509genkey(2048) ))
    pub: (( x509publickey(key) ))
    cert: (( x509cert(spec.aggregator_client) ))
  basic_auth: (( exec( "bash", "-c", "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1" ) ))
  service_account_key: (( x509genkey() ))


kubeapiserver:
  kubeconfig: (( landscape.clusters.[0].kubeconfig ))
  source: chart
  name: "garden-kube-apiserver"
  namespace: "garden"
  serviceName: (( name ))
  values:
    apiServer:
      hostname: (( .spec.apiserver_dns ))
      serviceName: (( name ))
      oidcIssuerURL: (( .imports.identity.export.issuer_url ))
    tls:
      kubeAPIServer:
        ca:
          crt: (( .state.kube_apiserver_ca.cert ))
          key: (( .state.kube_apiserver_ca.key ))
        server:
          crt: (( .state.kube_apiserver_server.cert ))
          key: (( .state.kube_apiserver_server.key ))
        basicAuthPassword: (( .state.basic_auth ))
      kubeAggregator:
        ca:
          crt: (( .state.kube_aggregator_ca.cert ))
          key: (( .state.kube_aggregator_ca.key ))
        client:
          crt: (( .state.kube_aggregator_client.cert ))
          key: (( .state.kube_aggregator_client.key ))
      admin:
        crt: (( .state.kube_apiserver_client_admin.cert ))
        key: (( .state.kube_apiserver_client_admin.key ))
      kubeControllerManager:
        crt: (( .state.kube_apiserver_client_kube_controller_manager.cert ))
        key: (( .state.kube_apiserver_client_kube_controller_manager.key ))
      serviceAccountKey: (( .state.service_account_key ))
      identity:
        ca:
          crt: (( .imports.identity.export.ca.crt ))
          key: (( .imports.identity.export.ca.key ))
    etcd:
      main:
        endpoints: (( join(",",.imports.etcd.exports.endpoints.main) ))
      events:
        endpoints: (( join(",",.imports.etcd.exports.endpoints.events) ))
      secretNames:
        ca: garden-etcd-main-ca
        client: garden-etcd-main-client
