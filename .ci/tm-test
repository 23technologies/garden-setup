#!/usr/bin/env bash
set -e

export SOURCE_PATH="$(readlink -f "$(dirname ${0})/..")"

TM_LANDSCAPE="external"
LANDSCAPE=""
ARGUMENTS=""

ARGOUI_ENDPOINT=""
S3_ENDPOINT=""
KIBANA_ENDPOINT=""


for i in "$@"
do
echo $i
case $i in
        -tm-landscape=*|--tm-landscape=*)
        TM_LANDSCAPE="${i#*=}"
        shift
    ;;
        -landscape=*|--landscape=*)
        LANDSCAPE="${i#*=}"
        shift
    ;;
        --)
        ARGUMENTS="${@:2}"
        break
    ;;
    *)
        # unknown option
        echo "Unkown option ${i#*=}"
        exit 1
    ;;
esac
done

if [[ $TM_LANDSCAPE == "" ]]; then
    echo "Required paramter: -tm-landscape : external | internal"
    exit 1
fi
if [[ $LANDSCAPE == "" ]]; then
    echo "Required paramter: -landscape"
    exit 1
fi

if [[ $TM_LANDSCAPE == "external" ]]; then
    TM_CONFIG_NAME=testmachinery
    S3_ENDPOINT="storage.googleapis.com"
fi
if [[ $TM_LANDSCAPE == "staging" ]]; then
    TM_CONFIG_NAME=testmachinery-staging
    S3_ENDPOINT="storage.googleapis.com"
fi

pushd .
cd $SOURCE_PATH
VERSION=$(git rev-parse HEAD)
popd
GARDENER_VERSION="$(cat $SOURCE_PATH/GARDENER_VERSION)"

# Add configuration if a configuration file exists
if [[ -f $OUT_PATH/config.yaml ]]; then
    ARGUMENTS="$ARGUMENTS --values=$OUT_PATH/config.yaml"
fi

echo "Testmachinery config name: ${TM_CONFIG_NAME}"
echo "Testmachinery landscape: ${TM_LANDSCAPE}"
echo "Arguments: ${ARGUMENTS}"
echo "Version: ${VERSION}"
echo "Gardener Version: ${GARDENER_VERSION}"

mkdir -p /tm
TM_CLUSTER=/tm/kubeconfig
/cc/utils/cli.py config attribute --cfg-type kubernetes --cfg-name $TM_CONFIG_NAME --key kubeconfig > $TM_CLUSTER

export KUBECONFIG=$TM_CLUSTER
kubectl cluster-info

# timeout to 6h
/testrunner run-gardener \
    --kubeconfig=$TM_CLUSTER \
    --timeout=21600 \
    --interval=60 \
    --es-config-name=sap_internal \
    --s3-endpoint=$S3_ENDPOINT \
    --s3-ssl=true \
    --landscape=$LANDSCAPE \
    --garden-setup-version=$VERSION \
    --gardener-version=$GARDENER_VERSION \
    --hostprovider=gardener \
    --host-cloudprovider=gcp \
    $ARGUMENTS
